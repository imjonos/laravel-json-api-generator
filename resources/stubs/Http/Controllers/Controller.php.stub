<?php

namespace App\Http\Controllers\Api{{namespacePath}};

use Illuminate\Pagination\Paginator;
use Nos\JsonApiGenerator\Http\Controllers\ApiController;
use {{modelsNamespace}}{{modelName}};
use Illuminate\Support\Facades\DB;
use Illuminate\Http\JsonResponse
use App\Services\{{modelName}}Service;
use App\Http\Requests\Api{{namespacePath}}\{{modelName}}\{
    IndexRequest,
    StoreRequest,
    UpdateRequest
};
use App\Http\Resources\Api{{namespacePath}}\{{modelName}}\{
    {{modelName}}Resource,
    {{modelNamePlural}}Resource
};

class {{modelName}}Controller extends ApiController
{
    /**
     * @var int
     */
    public const PAGE_LIMIT = 10;
    private {{modelName}}Service ${{modelNameLowerCase}}Service;

    /**
     * {{modelName}}Controller constructor.
     *
     * Example of array
     * 'city' => [
     *     'class' => City::class,
     *     'type' => 'cities',
     *     'key' => 'city_id'
     *  ]
     */
    public function __construct({{modelName}}Service ${{modelNameLowerCase}}Service)
    {
        $this->setToOneRelationships([]);
        $this->setToManyRelationships([]);
        $this->{{modelNameLowerCase}}Service = ${{modelNameLowerCase}}Service;
    }

    /**
     * Display a listing of the resource.
     *
     * @bodyParam  filter array
     *
     * @bodyParam  page array
     * @bodyParam  page.size numeric
     * @bodyParam  page.number numeric
     *
     * @param IndexRequest $request
     * @return {{modelNamePlural}}Resource
     * @throws BindingResolutionException
     */
    public function index(IndexRequest $request): {{modelNamePlural}}Resource
    {
        $pageSize = $request->input('page.size', self::PAGE_LIMIT);
        $pageNumber = $request->input('page.number', 1);

        $result = $this->{{modelNameLowerCase}}Service->paginate($pageNumber, $pageSize);

        return new {{modelNamePlural}}Resource($result);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  StoreRequest  $request
     * @return JsonResponse
     */
    public function store(StoreRequest $request): JsonResponse
    {
        DB::transaction(function () use ($request) {
            $relationshipsToOne = $this->getDataWithRelationshipsToOne($request);
            $relationshipsToMany = $this->getDataWithRelationshipsToMany($request);
            ${{modelNameLowerCase}} = $this->{{modelNameLowerCase}}Service->create($relationshipsToOne);
            foreach ($relationshipsToMany AS $key => $relation){
                ${{modelNameLowerCase}}->{$key}()->sync($relation);
            }
        });
        return response()->json([], 204);
    }

    /**
     * Display the specified resource.
     *
     * @param {{modelName}} ${{modelNameLowerCase}}
     * @return {{modelName}}Resource
     */
    public function show({{modelName}} ${{modelNameLowerCase}}): {{modelName}}Resource
    {
        return new {{modelName}}Resource(${{modelNameLowerCase}});
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  UpdateRequest $request
     * @param {{modelName}} ${{modelNameLowerCase}}
     * @return {{modelName}}Resource
     */
    public function update(UpdateRequest $request, {{modelName}} ${{modelNameLowerCase}}): {{modelName}}Resource
    {
        DB::transaction(function () use ($request, ${{modelNameLowerCase}}) {
            $relationshipsToOne = $this->getDataWithRelationshipsToOne($request);
            $relationshipsToMany = $this->getDataWithRelationshipsToMany($request);
            $this->{{modelNameLowerCase}}Service->update(${{modelNameLowerCase}}->id,$relationshipsToOne);
            foreach ($relationshipsToMany AS $key => $relation){
                $${{modelNameLowerCase}}->{$key}()->sync($relation);
            }
        });
        return new {{modelName}}Resource(${{modelNameLowerCase}}->fresh());
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param {{modelName}} ${{modelNameLowerCase}}
     * @return JsonResponse
     * @throws BindingResolutionException
     */
    public function destroy({{modelName}} ${{modelNameLowerCase}}): JsonResponse
    {
        $this->{{modelNameLowerCase}}Service->delete(${{modelNameLowerCase}}->id);
        return response()->json([], 204);
    }
}
