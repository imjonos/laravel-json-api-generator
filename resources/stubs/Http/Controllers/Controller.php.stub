<?php

namespace App\Http\Controllers\Api{{namespacePath}};

use Illuminate\Pagination\Paginator;
use Nos\JsonApiGenerator\Http\Controllers\ApiController;
use {{modelsNamespace}}{{modelName}};
use App\Http\Requests\Api{{namespacePath}}\{{modelName}}\{
    IndexRequest,
    StoreRequest,
    UpdateRequest
};
use App\Http\Resources\Api{{namespacePath}}\{{modelName}}\{
    {{modelName}}Resource,
    {{modelNamePlural}}Resource
};

class {{modelName}}Controller extends ApiController
{
    /**
     * @var int
     */
    public int $perPage = 10;
    
    
    /**
     * {{modelName}}Controller constructor.
     * 
     * Example of array
     * 'city' => [
     *     'class' => City::class,
     *     'type' => 'cities',
     *     'key' => 'city_id'
     *  ]
     */
    public function __construct()
    {
        $this->setToOneRelationships([]);
        $this->setToManyRelationships([]);
    }

    /**
     * Display a listing of the resource.
     *
     * @bodyParam  filter array
     *
     * @bodyParam  page array
     * @bodyParam  page.size numeric
     * @bodyParam  page.number numeric
     *
     * @param IndexRequest $request
     * @return {{modelNamePlural}}Resource
     */
    public function index(IndexRequest $request): {{modelNamePlural}}Resource
    {
        $pageSize = $request->input('page.size', $this->perPage);
        $pageNumber = $request->input('page.number', 1);
        
        Paginator::currentPageResolver(function () use ($pageNumber) {
            return $pageNumber;
        });
        
        $result =  {{modelName}}::paginate($pageSize);

        return new {{modelNamePlural}}Resource($result);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  StoreRequest  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function store(StoreRequest $request): \Illuminate\Http\JsonResponse
    {
        $relationshipsToOne = $this->getDataWithRelationshipsToOne($request);
        $relationshipsToMany = $this->getDataWithRelationshipsToMany($request);
        ${{modelNameLowerCase}} = {{modelName}}::create($relationshipsToOne);
        foreach ($relationshipsToMany AS $key => $relation){
            ${{modelNameLowerCase}}->{$key}()->sync($relation);
        }
        return response()->json([], 204);
    }

    /**
     * Display the specified resource.
     *
     * @param {{modelName}} ${{modelNameLowerCase}}
     * @return {{modelName}}Resource
     */
    public function show({{modelName}} ${{modelNameLowerCase}}): {{modelName}}Resource
    {
        return new {{modelName}}Resource(${{modelNameLowerCase}});
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  UpdateRequest $request
     * @param {{modelName}} ${{modelNameLowerCase}}
     * @return {{modelName}}Resource
     */
    public function update(UpdateRequest $request, {{modelName}} ${{modelNameLowerCase}}): {{modelName}}Resource
    {
        $relationshipsToOne = $this->getDataWithRelationshipsToOne($request);
        $relationshipsToMany = $this->getDataWithRelationshipsToMany($request);
        ${{modelNameLowerCase}}->update($relationshipsToOne);
        foreach ($relationshipsToMany AS $key => $relation){
            $${{modelNameLowerCase}}->{$key}()->sync($relation);
        }

        return new {{modelName}}Resource(${{modelNameLowerCase}}->fresh());
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param {{modelName}} ${{modelNameLowerCase}}
     * @return \Illuminate\Http\Response
     */
    public function destroy({{modelName}} ${{modelNameLowerCase}}): \Illuminate\Http\Response
    {
        ${{modelNameLowerCase}}->delete();
        return response()->json([], 204);
    }
}
